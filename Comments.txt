Unfinished features:
1. regex on the python side to match the JS patterns since the JS can be turned
off
2. Form validation for the upload form (the media name + tags/metadata regex that
would be added to functions.js + file extension validation)
3. The kudo/likes system (on the individual media page)
4. The edit system (on the individual media page)
5. Preventing download unless user specifies it is downloadable feature
(individual media page and gallery)
6. Tag validation beyond stripping surrounding whitespace on both ends and
investigating ideas on how to merge similar meaning tags (very hard to mimic AO3?)
7. More testing - selenium for walking through
8. Login validation (ajax request for email validation may take too long)
9. Discover page for media (with all the filters) - likely similar to the React
page in that there would be a virtual canvas over the whole page and React would
render the different components in the content div and then call three.js code
10. AWS S3 storage for file saving rather than on my local OS
11. DeviantArt API (does not seem to work without a domain and https - deployment)


Bugs:
1. The id for canvas (c) means no 3D object can be called c or else the 3D object
will be rendered in the large canvas - choose a reserved keyword for the canvas


Reflection Notes:
1. Perhaps disable form inputs in the beginning of JS script instead of inherently
in the HTML just in case users have the JS disabled so they can have access to
the input fields
2. Investigate alternatives on form validation, since the features are not fully
supported in some browsers, to the 'input' event and setCustomValidity/reportValidity
(and look into the bug with input type 'email' popping its error message sometimes
when the input changes and the focus is maintained)
3. Look into refactoring a lot of the python validation to be in functions since
the checks are similar
4. On the gallery page, any errors will be above the navbar since React
generates the navbar (necessary for the edit/follow button) - investigate
alternatives
5. In hindsight, probably some of the layout decisions for the mediapage was probably
unwise since large amounts of media info will look really weird but I also liked
being able to read the description and see the image. And there was a lot of extra
whitespace since the screen is so wide (have similar media (tags?) show up to take
up space if the screen width is large). Maybe some sort of balance (especially for
description) can be found.
6. Routes for Flask should have a static part of the url to avoid catching things
like localhost://flavicon.ico, etc since it can trigger Flask flash messages when
arguments are not passed to the route function
7. GLTF (in JSON) file format do not have to have .bin files (unrequire it) and
also accept .glb (binary) file formats which also use the GLTFLoader. They can
also have textures (so match the obj texture settings)